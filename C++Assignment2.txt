//1.Public Inheritance
// C++ program to demonstrate the working of public inheritance

#include <bits/stdc++.h>
using namespace std;

class Base {
  private:
    int pvt = 1;

  protected:
    int prot = 2;

  public:
    int pub = 3;

    
    int getPVT() {
      return pvt;
    }
};

class PublicDerived : public Base {
  public:
    
    int getProt() {
      return prot;
    }
};

int main() {
  PublicDerived object1;
  cout << "Private = " << object1.getPVT() << endl;
  cout << "Protected = " << object1.getProt() << endl;
  cout << "Public = " << object1.pub << endl;
  return 0;
}

//1.Protected Inheritance
// C++ program to demonstrate the working of protected inheritance

#include <bits/stdc++.h>
using namespace std;

class Base {
  private:
    int pvt = 1;

  protected:
    int prot = 2;

   public:
    int pub = 3;

    
    int getPVT() {
      return pvt;
    }
};

class ProtectedDerived : protected Base {
  public:
   
    int getProt() {
      return prot;
    }

    
    int getPub() {
      return pub;
    }
};

int main() {
  ProtectedDerived object1;
  cout << "Private cannot be accessed." << endl;
  cout << "Protected = " << object1.getProt() << endl;
  cout << "Public = " << object1.getPub() << endl;
  return 0;
}

//1.Private Inheritance
// C++ program to demonstrate the working of private inheritance

#include <bits/stdc++.h>
using namespace std;

class Base {
  private:
    int pvt = 1;

  protected:
    int prot = 2;

  public:
    int pub = 3;

    
    int getPVT() {
      return pvt;
    }
};

class PrivateDerived : private Base {
  public:
    
    int getProt() {
      return prot;
    }

    int getPub() {
      return pub;
    }
};

int main() {
  PrivateDerived object1;
  cout << "Private cannot be accessed." << endl;
  cout << "Protected = " << object1.getProt() << endl;
  cout << "Public = " << object1.getPub() << endl;
  return 0;
}


//2. Multilevel Inheritance
#include <bits/stdc++.h>
using namespace std;

class A {
    public:
      void display() {
          cout<<"Base class content.";
      }
};

class B : public A {};

class C : public B {};

int main() {
    C obj;
    obj.display();
    return 0;
}

//3.Multiple Inheritance
#include <bits/stdc++.h>
using namespace std;

class Mammal {
  public:
    Mammal() {
      cout << "Mammals can give direct birth." << endl;
    }
};

class WingedAnimal {
  public:
    WingedAnimal() {
      cout << "Winged animal can flap." << endl;
    }
};

class Bat: public Mammal, public WingedAnimal {};

int main() {
    Bat b1;
    return 0;
}



//4.
// C++ program to show the order of constructor call
// in single inheritance

#include <bits/stdc++.h>
using namespace std;

// base class
class Parent
{
	public:
	
	// base class constructor
	Parent()
	{
		cout << "Inside base class" << endl;
	}
  ~Parent()
	{
		cout << "Destructor base class" << endl;
	}
};


// sub class
class Child : public Parent
{
	public:
	
	//sub class constructor
	Child()
	{
		cout << "Inside sub class" << endl;
	}
    ~Child()
	{
		cout << "Destructor sub class" << endl;
	}
};

class subChild: public Child
{
   public:
   
   subChild()
   {
   cout<<"Inside Child"<<endl;
   }
   ~subChild()
   {
   cout<<"Destructor Inside Child"<<endl;
   }


};

// main function
int main() {
	
	// creating object of sub class
	subChild obj;
	
	return 0;
}
//5.
#include <bits/stdc++.h>
using namespace std;


class Shape
{
private:
	double width, height;
public:
	//  constructor
	Shape(double newWidth, double newHeight){
		this->width=newWidth;
		this->height=newHeight;
	}
	double getWidth() const
	{
		return width;
	}
	double getHeight() const
	{
		return height;
	}
};


class Rectangle: public Shape
{
public:
   
    Rectangle(double width, double height):Shape(width,height)
    {


    }
    double area()
    {
        return (getWidth()*getHeight());
    }
};


class Triangle: public Shape
{
public:
    Triangle(double base, double height): Shape(base,height)
    {


    }
    double area()
    {
        return (getWidth()*getHeight())/2.0;
    }
};


int main ()
{
	Rectangle rectangle(5.0,3.0);
	Triangle triangle(2.0,5.0);
	cout <<"Area of rectangle is: "<< rectangle.area() << endl;
	cout <<"Area of triangle is: "<< triangle.area() << endl;


	system("pause");
	return 0;
}

//6.
#include <bits/stdc++.h>
using namespace std;

class Mother{
public:
	Mother(){};
	void display(){cout << "hello im the mother!"<< endl;};	
};

class Daughter : public Mother{
public:
	Daughter(){};
	void display(){cout << "hello im the daugther!"<< endl;};	
};

int main()
{	
	Mother mo;
	Daughter dau;
	mo.display();
	dau.display();

	return 0;
}


